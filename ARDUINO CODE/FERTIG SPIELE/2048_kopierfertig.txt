#include "Adafruit_NeoPixel.h"


const int relais = 35;
const int fan = 37;
Adafruit_NeoPixel strip = Adafruit_NeoPixel(200, 33, NEO_RGB + NEO_KHZ800);
Adafruit_NeoPixel standby_strip = Adafruit_NeoPixel(1, 31, NEO_RGB + NEO_KHZ800);
const unsigned int feldx = 20;
const unsigned int feldy = 10;

int nullpunkt = 1; //0: oben links, 1: oben rechts, 2: unten links, 3: unten rechts

int mode = 11;

const int square_number_field_offset[2] = {5,0};
int square_number_field[5][5][2]; // 0 = wert // 1 = moved
int square_new_number_pos[2];
int square_start_numbers[2] = {2,4};
int square_new_number = 0;
int square_cycle_value = 0;
int square_active_fields = 0;
int square_allow_reset = 1;
int square_animation_speed = 10;

byte square_p1_controller_data_tmp = 0;


unsigned int square_boot_strip[48] = { get_led_number(0, 7), get_led_number(0, 4), get_led_number(1, 7), get_led_number(1, 5), get_led_number(1, 3), get_led_number(2, 6), get_led_number(2, 3), get_led_number(4, 6), get_led_number(4, 5), get_led_number(4, 4), get_led_number(5, 7), get_led_number(5, 3), get_led_number(6, 7), get_led_number(6, 6), get_led_number(6, 3), get_led_number(7, 6), get_led_number(7, 5), get_led_number(7, 4), get_led_number(9, 7), get_led_number(9, 6), get_led_number(9, 5), get_led_number(9, 4), get_led_number(10, 5), get_led_number(10, 3), get_led_number(11, 5), get_led_number(11, 3), get_led_number(12, 7), get_led_number(12, 6), get_led_number(12, 5), get_led_number(12, 4), get_led_number(14, 7), get_led_number(14, 6), get_led_number(14, 5), get_led_number(14, 4), get_led_number(14, 3), get_led_number(15, 5), get_led_number(15, 3), get_led_number(16, 7), get_led_number(16, 6), get_led_number(16, 4), get_led_number(18, 7), get_led_number(18, 6), get_led_number(18, 5), get_led_number(18, 4), get_led_number(18, 3), get_led_number(19, 7), get_led_number(19, 5), get_led_number(19, 3)};

int square_boot_wheelpos = 0;


int p1_score = 0;
int p2_score = 0;
int p1_latch = A1; // set the latch pin
int p1_clock = A0; // set the clock pin
int p1_datin = A2;// set the data in pin
int p2_latch = A4; // set the latch pin
int p2_clock = A3; // set the clock pin
int p2_datin = A5;// set the data in pin
byte p1_controller_data = 0;
byte p2_controller_data = 0;






//--------------------------------------end vars--------------------------------------------------


void clear_screen() {
  uint16_t i, j;
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(0,0,0));
    }
    strip.show();
}



void square_clear_number_field(){
  for (int i = 0; i < 5; i++){for (int j = 0; j < 5; j++){square_number_field[i][j][0] = 0;square_number_field[i][j][1] = 0;}}
}



void setup(){

  randomSeed(analogRead(6));
 pinMode(relais,OUTPUT); 
  pinMode(fan,OUTPUT); 
 digitalWrite(relais,HIGH);
 digitalWrite(fan,HIGH);
 
   strip.begin();
  strip.show(); // Initialize all pixels to 'off'
  

   //CONTROLLER INIT
pinMode(p1_latch,OUTPUT);
pinMode(p1_clock,OUTPUT);
pinMode(p1_datin,INPUT);
digitalWrite(p1_latch,HIGH);
digitalWrite(p1_clock,HIGH);
pinMode(p2_latch,OUTPUT);
pinMode(p2_clock,OUTPUT);
pinMode(p2_datin,INPUT);
digitalWrite(p2_latch,HIGH);
digitalWrite(p2_clock,HIGH);





square_main_reset();


}




void loop() {

  square_loop();
}





//hier die main spiel loop
void square_loop(){
  square_display_grid();
  controllerRead();
  if(square_cycle_value >= 256){
  square_cycle_value = 0;
  }else{
  square_cycle_value++;
  }
  strip.show();
}

void square_boot_show() {
  for (int i = 0; i < 48; i++) {
    strip.setPixelColor(square_boot_strip[i], Wheel(square_boot_wheelpos));
    square_boot_wheelpos += 5;
    if (square_boot_wheelpos >= 255) {
     square_boot_wheelpos = 0; 
    }
    strip.show();
    delay(50);
  }
  delay(2000);
  clear_screen();
}


//nurm beim start aufgerufen
void square_main_reset(){
square_reset_game();
}

void  square_reset_game(){
  square_boot_show();
  clear_screen();
square_clear_number_field();
square_add_new_number();
 if(square_cycle_value >= 256){square_cycle_value = 0;}else{square_cycle_value++;}
square_display_grid();
delay(100);
}




void square_count_active_fields(){
square_active_fields = 0;
for (int i = 0; i < 5; i++){for (int j = 0; j < 5; j++){if(square_number_field[i][j][0] != 0){square_active_fields++;}}}  
}



void square_add_new_number(){
  square_count_active_fields();
if(square_active_fields < 25){ 
square_new_number_pos[0] = random(0, 5); // X
square_new_number_pos[1] = random(0, 5); // Y
while(square_number_field[square_new_number_pos[0]][square_new_number_pos[1]][0] != 0){square_new_number_pos[0] = random(0, 5);} // Xsquare_new_number_pos[1] = random(0, 5); // Y }
switch (random(0, 2)) {
  case 0:
    square_new_number = 2;
    break;
  case 1:
   square_new_number = 4;
    break;
  default: 
  square_new_number = 2;
}
square_number_field[square_new_number_pos[0]][square_new_number_pos[1]][0] = square_new_number;
}else{
  for (int i = 0; i < strip.numPixels(); i++){strip.setPixelColor(i, strip.Color(255, 0, 0));}
  strip.show();
  delay(5000);
  clear_screen();
  square_reset_game();
}
   for (int i = 0; i < 5; i++){for (int j = 0; j < 5; j++){square_number_field[i][j][1] = 0; }} 
}




void square_display_grid(){
int field_color = 0;
 for (int i = 0; i < 5; i++){
 for (int j = 0; j < 5; j++){
   if(square_number_field[i][j][0] == 0){ field_color = strip.Color(0, 0, 0);}
   else if(square_number_field[i][j][0] == 2){ field_color = strip.Color(100, 0, 0);}
   else if(square_number_field[i][j][0] == 4){ field_color = strip.Color(0, 100, 0);}
   else if(square_number_field[i][j][0] == 8){ field_color = strip.Color(0, 0, 100);}
   else if(square_number_field[i][j][0] == 16){ field_color = strip.Color(100, 100, 0);}
   else if(square_number_field[i][j][0] == 32){ field_color = strip.Color(100, 0, 100);}
   else if(square_number_field[i][j][0] == 64){ field_color = strip.Color(0, 100, 100);}
   else if(square_number_field[i][j][0] == 128){ field_color = strip.Color(100, 100, 100);} 
   else if(square_number_field[i][j][0] == 256){ field_color = strip.Color(255, 0, 0);}
   else if(square_number_field[i][j][0] == 512){ field_color = strip.Color(0, 255, 0);}
   else if(square_number_field[i][j][0] == 1024){ field_color = strip.Color(0, 0, 255);}
   else if(square_number_field[i][j][0] == 2048){ field_color = strip.Color(255, 255, 0);}
   else if(square_number_field[i][j][0] == 4096){ field_color = strip.Color(255, 0, 255);}
   else if(square_number_field[i][j][0] == 8192){ field_color = strip.Color(0, 255, 255);}
   else if(square_number_field[i][j][0] == 16384){ field_color = strip.Color(255, 255, 255);}  
   else {field_color = strip.Color(10, 10, 10);} 
   	strip.setPixelColor(get_led_number((i*2)+square_number_field_offset[0],(j*2)+square_number_field_offset[1]),field_color);
        strip.setPixelColor(get_led_number((i*2+1)+square_number_field_offset[0],(j*2+1)+square_number_field_offset[1]),field_color);
        strip.setPixelColor(get_led_number((i*2)+square_number_field_offset[0],(j*2+1)+square_number_field_offset[1]),field_color);
        strip.setPixelColor(get_led_number((i*2+1)+square_number_field_offset[0],(j*2)+square_number_field_offset[1]),field_color);
 }}
//rahmen malen
 for (int k = 0; k < 10; k++){
strip.setPixelColor(get_led_number(square_number_field_offset[0]-1,square_number_field_offset[1]+k),Wheel(square_cycle_value));
strip.setPixelColor(get_led_number(square_number_field_offset[0]+10,square_number_field_offset[1]+k),Wheel(square_cycle_value));
 }
strip.show();
}






void controllerRead() {
p1_controller_data = 0;
digitalWrite(p1_latch,LOW);digitalWrite(p1_clock,LOW);digitalWrite(p1_latch,HIGH);
delayMicroseconds(2);
digitalWrite(p1_latch,LOW);
p1_controller_data = digitalRead(p1_datin);
for (int i = 1; i <= 7; i ++) {
digitalWrite(p1_clock,HIGH);
delayMicroseconds(2);
p1_controller_data = p1_controller_data << 1;
p1_controller_data = p1_controller_data + digitalRead(p1_datin) ;
delayMicroseconds(4);
digitalWrite(p1_clock,LOW);}
//----------------------
delayMicroseconds(4);
//----------------------
p2_controller_data = 0;
digitalWrite(p2_latch,LOW);digitalWrite(p2_clock,LOW);digitalWrite(p2_latch,HIGH);
delayMicroseconds(2);
digitalWrite(p2_latch,LOW);
p2_controller_data = digitalRead(p2_datin);
for (int i = 1; i <= 7; i ++) {
digitalWrite(p2_clock,HIGH);
delayMicroseconds(2);
p2_controller_data = p2_controller_data << 1;
p2_controller_data = p2_controller_data + digitalRead(p2_datin) ;
delayMicroseconds(4);
digitalWrite(p2_clock,LOW);}







if(mode == 4){
//pong_interpret_controller();
}else if(mode == 10){
//react_interpret_controller();
}else if(mode == 11){
square_interpret_controller();
}




}


void square_move_down(){
   for (int i = 0; i < 5; i++){
 for (int j = 0; j < 4; j++){
   if(square_number_field[i][j][0] == 0){   
}else if(square_number_field[i][j+1][0] == 0){
square_number_field[i][j+1][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}else if(square_number_field[i][j][0] == square_number_field[i][j+1][0]  && square_number_field[i][j+1][1] == 0 && square_number_field[i][j][1] == 0 ){
square_number_field[i][j+1][0] = square_number_field[i][j+1][0]*2;
square_number_field[i][j][0] = 0;
square_number_field[i][j+1][1] = 1;
}
   for (int i = 0; i < 5; i++){
 for (int j = 0; j < 4; j++){
if(square_number_field[i][j+1][0] == 0){
square_number_field[i][j+1][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}}}
square_display_grid();
delay(square_animation_speed);
 }}
  square_add_new_number();
}





void square_move_up(){
   for (int i = 0; i < 5; i++){
 for (int j = 1; j < 5; j++){
   if(square_number_field[i][j][0] == 0){   
}else if(square_number_field[i][j-1][0] == 0){
square_number_field[i][j-1][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}else if(square_number_field[i][j][0] == square_number_field[i][j-1][0]  && square_number_field[i][j-1][1] == 0 && square_number_field[i][j][1] == 0 ){
square_number_field[i][j-1][0] = square_number_field[i][j-1][0]*2;
square_number_field[i][j][0] = 0;
square_number_field[i][j-1][1] = 1; 
}
   for (int i = 0; i < 5; i++){
 for (int j = 1; j < 5; j++){
if(square_number_field[i][j-1][0] == 0){
square_number_field[i][j-1][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}}}
square_display_grid();
delay(square_animation_speed);
 }}
  square_add_new_number();
}
      



void square_move_right(){
   for (int i = 0; i < 4; i++){
 for (int j = 0; j < 5; j++){
   if(square_number_field[i][j][0] == 0){   
}else if(square_number_field[i+1][j][0] == 0){
square_number_field[i+1][j][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;    
}else if(square_number_field[i][j][0] == square_number_field[i+1][j][0]  && square_number_field[i+1][j][1] == 0 && square_number_field[i][j][1] == 0 ){
square_number_field[i+1][j][0] = square_number_field[i+1][j][0]*2;
square_number_field[i][j][0] = 0;
square_number_field[i+1][j][1] = 1; 
}
   for (int i = 0; i < 4; i++){
 for (int j = 0; j < 5; j++){
if(square_number_field[i+1][j][0] == 0){
square_number_field[i+1][j][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}}}
square_display_grid();
delay(square_animation_speed);
 }}
  square_add_new_number();
}




void square_move_left(){
   for (int i = 1; i < 5; i++){
 for (int j = 0; j < 5; j++){
   if(square_number_field[i][j][0] == 0){   
}else if(square_number_field[i-1][j][0] == 0){
square_number_field[i-1][j][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;    
}else if(square_number_field[i][j][0] == square_number_field[i-1][j][0]  && square_number_field[i-1][j][1] == 0 && square_number_field[i][j][1] == 0 ){
square_number_field[i-1][j][0] = square_number_field[i-1][j][0]*2;
square_number_field[i][j][0] = 0;
square_number_field[i-1][j][1] = 1; 
}
   for (int i = 1; i < 5; i++){
 for (int j = 0; j < 5; j++){
if(square_number_field[i-1][j][0] == 0){
square_number_field[i-1][j][0] = square_number_field[i][j][0];  
square_number_field[i][j][0] = 0;  
}}}
square_display_grid();
delay(square_animation_speed);
 }}
  
  square_add_new_number();
}



void square_interpret_controller(){
  if (square_p1_controller_data_tmp == 0) {
    if (p1_controller_data == B01111111 || p1_controller_data == B10111111 || p1_controller_data == B11110111 || p1_controller_data == B11111011 || p1_controller_data == B11111110 || p1_controller_data == B11111101 || p1_controller_data == B11011111 || p1_controller_data == B11101111)
    {
      square_p1_controller_data_tmp = p1_controller_data;
    }}
  else if (p1_controller_data != B01111111 && p1_controller_data != B10111111 && p1_controller_data != B11110111 && p1_controller_data != B11111011 && p1_controller_data != B11111110 && p1_controller_data != B11111101 && p1_controller_data != B11011111 && p1_controller_data != B11101111 ) {
if(square_p1_controller_data_tmp==B01111111){  square_p1_controller_data_tmp =0;}//A   
if(square_p1_controller_data_tmp==B10111111){  square_p1_controller_data_tmp =0;}// B
if(square_p1_controller_data_tmp==B11110111){square_move_up();  square_p1_controller_data_tmp =0;} //UP
if(square_p1_controller_data_tmp==B11111011){ square_move_down(); square_p1_controller_data_tmp =0;}// DOWN
if(square_p1_controller_data_tmp==B11111110){ square_move_right();square_p1_controller_data_tmp = 0;}//RIGHT
if(square_p1_controller_data_tmp==B11111101){square_move_left();  square_p1_controller_data_tmp =0;}//LEFT
//if(square_p1_controller_data_tmp==B11011111){add_new_number();  p1_controller_data_tmp =}//SELCET
if(square_p1_controller_data_tmp==B11101111){ if(square_allow_reset == 1){square_reset_game();} square_p1_controller_data_tmp =0;}//START
}}




unsigned int get_led_number(int x, int y) {

  if (y % 2) { //ungerade
    switch (nullpunkt)
    {
      case 0: //oben links
        return (y * feldx) + feldx - 1 - x; //ungerade
      case 1: //oben rechts
        return (y * feldx) + x;
      case 2: //unten links
        return (feldx * feldy) - 1 - 19 - (y * feldx) + x;
      case 3: //unten rechts
        return (feldx * feldy) - 1  - 19 - (y * feldx) + feldx - 1 - x;
    }
  } else { //gerade
    switch (nullpunkt) {
      case 0: //oben links
        return (y * feldx) + x;

      case 1: //oben rechts
        return (y * feldx) + feldx - 1 - x;
      case 2: //unten links
        return (feldx * feldy) - 1 - 19 - (y * feldx) + feldx - 1 - x;
      case 3: //unten rechts
        return (feldx * feldy) - 1 - 19 - (y * feldx) + x;
    }
  }

}




uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}

