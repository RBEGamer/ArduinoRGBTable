#include "Adafruit_NeoPixel.h"


#define NUM_LEDS 200

#define PIN 4


Adafruit_NeoPixel strip = Adafruit_NeoPixel(200, 33, NEO_RGB + NEO_KHZ800);

const unsigned int feldx = 20;

const unsigned int feldy = 10;

int mode = 13;



int p1_latch = A1; // set the latch pin

int p1_clock = A0; // set the clock pin

int p1_datin = A2;// set the data in pin

int p2_latch = A4;// set the latch pin

int p2_clock = A3; // set the clock pin

int p2_datin = A5;// set the data in pin

byte p1_controller_data = 0;

byte p2_controller_data = 0;

int paint_wheelpos = 0;
int paint_spiegeln = 1;
int paint_pointer_x;
int paint_pointer_y;
uint32_t paint_grid[NUM_LEDS];

//Steuerung: steuerkreuz: zeiger setzen, Select: Farbe wählen, Start: neue seite, A: malen, B: löschen

//----------------------------------------------paint---------------------------------------------
void clear_screen() {

  uint16_t i;

  for (i = 0; i < strip.numPixels(); i++) {

    strip.setPixelColor(i, strip.Color(0, 0, 0));

  }

  strip.show();

}

void setup() {

  randomSeed(analogRead(6));

  strip.begin();

  //CONTROLLER INIT

  pinMode(p1_latch, OUTPUT);

  pinMode(p1_clock, OUTPUT);

  pinMode(p1_datin, INPUT);

  digitalWrite(p1_latch, HIGH);

  digitalWrite(p1_clock, HIGH);

  pinMode(p2_latch, OUTPUT);

  pinMode(p2_clock, OUTPUT);

  pinMode(p2_datin, INPUT);

  digitalWrite(p2_latch, HIGH);

  digitalWrite(p2_clock, HIGH);

  clear_screen();

  paint_main_reset();

}

void paint_new_page() {
	for (int i = 0; i < strip.numPixels(); i++){
	paint_grid[i] = strip.Color(255, 255, 255);
	}
	paint_draw_grid();
}

void paint_main_reset() {
if (paint_spiegeln == 1) {
paint_pointer_x = 19;
paint_pointer_y = 9;
} else {
paint_pointer_x = 0;
paint_pointer_y = 0;
}
for (int i = 0; i < strip.numPixels(); i++)
{
paint_grid[i] = strip.Color(255, 255, 255);
}
}

void loop() {
paint_loop();
}

void paint_loop() {
controllerRead();
delay (100);
}

void paint_draw_pointer() {
strip.setPixelColor(get_led_number(paint_pointer_x, paint_pointer_y), strip.Color(0, 0, 0));
strip.show();
}

void paint_del_pointer() {
strip.setPixelColor(get_led_number(paint_pointer_x, paint_pointer_y), paint_grid[get_led_number(paint_pointer_x, paint_pointer_y)]);
strip.show();
}

void paint_safe_pointer() {
paint_grid[get_led_number(paint_pointer_x, paint_pointer_y)] = Wheel(paint_wheelpos);
paint_draw_grid();
}

void paint_draw_color() {
strip.setPixelColor(get_led_number(paint_pointer_x, paint_pointer_y), Wheel(paint_wheelpos));
strip.show();
}

void paint_erase_pixel() {
paint_grid[get_led_number(paint_pointer_x, paint_pointer_y)] = strip.Color(255, 255, 255);
paint_draw_grid();
}

void paint_draw_grid() {
for (int i = 0; i < strip.numPixels(); i++) {
strip.setPixelColor(i, paint_grid[i]);
}
strip.show();
}


void controllerRead() {
p1_controller_data = 0;
digitalWrite(p1_latch,LOW);digitalWrite(p1_clock,LOW);digitalWrite(p1_latch,HIGH);
delayMicroseconds(2);
digitalWrite(p1_latch,LOW);
p1_controller_data = digitalRead(p1_datin);
for (int i = 1; i <= 7; i ++) {
digitalWrite(p1_clock,HIGH);
delayMicroseconds(2);
p1_controller_data = p1_controller_data << 1;
p1_controller_data = p1_controller_data + digitalRead(p1_datin) ;
delayMicroseconds(4);
digitalWrite(p1_clock,LOW);}
//----------------------
delayMicroseconds(4);
//----------------------
p2_controller_data = 0;
digitalWrite(p2_latch,LOW);digitalWrite(p2_clock,LOW);digitalWrite(p2_latch,HIGH);
delayMicroseconds(2);
digitalWrite(p2_latch,LOW);
p2_controller_data = digitalRead(p2_datin);
for (int i = 1; i <= 7; i ++) {
digitalWrite(p2_clock,HIGH);
delayMicroseconds(2);
p2_controller_data = p2_controller_data << 1;
p2_controller_data = p2_controller_data + digitalRead(p2_datin) ;
delayMicroseconds(4);
digitalWrite(p2_clock,LOW);}

if (mode == 4) {

    //pong_interpret_controller();

  } else if (mode == 10) {

    //react_interpret_controller();

  } else if (mode == 12) {

    //senso_interpret_controller();

  } else if (mode == 13) {
	paint_interpret_controller();
  }
}

void paint_mv_up() {
if (paint_pointer_y < 9) {
paint_del_pointer();
paint_pointer_y ++;
delay(20);
paint_draw_pointer();
}
}
void paint_mv_down() {
if (paint_pointer_y > 0) {
paint_del_pointer();
paint_pointer_y --;
delay(20);
paint_draw_pointer();
}
}
void paint_mv_left() {
if (paint_pointer_x < 19) {
paint_del_pointer();
paint_pointer_x ++;
delay(20);
paint_draw_pointer();
}
}
void paint_mv_right() {
if (paint_pointer_x > 0) {
paint_del_pointer();
paint_pointer_x --;
delay(20);
paint_draw_pointer();
}
}


void paint_interpret_controller(){
if(p1_controller_data==B01111111){ paint_safe_pointer();}//A   
if(p1_controller_data==B10111111){ paint_erase_pixel();}// B
if(p1_controller_data==B11110111){ if (paint_spiegeln == 1) {paint_mv_down();} else { paint_mv_up();}} //UP
if(p1_controller_data==B11111011){ if (paint_spiegeln == 1) {paint_mv_up();} else { paint_mv_down();}}// DOWN
if(p1_controller_data==B11111110){ if (paint_spiegeln == 1) {paint_mv_left();} else { paint_mv_right();}}//RIGHT
if(p1_controller_data==B11111101){ if (paint_spiegeln == 1) {paint_mv_right();} else { paint_mv_left();}}//LEFT
if(p1_controller_data==B11011111){paint_wheelpos += 15; if (paint_wheelpos >= 255) {paint_wheelpos = 0;} paint_draw_color();}//SELCET
if(p1_controller_data==B11101111){paint_new_page();}//START
}


uint32_t Wheel(byte WheelPos) {
  if (WheelPos < 85) {
    return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}

//COORDS TO LED NUMBER

unsigned int get_led_number(int x, int y) {

  if (y % 2) {

    return (y * feldx) + feldx - 1 - x; //ungerade

  } else {

    return (y * feldx) + x; //y=1; //GERADE

  }

}
